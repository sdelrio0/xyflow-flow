// @flow

import type { Selection as D3Selection } from 'd3-selection';
import type { D3DragEvent, SubjectPosition } from 'd3-drag';
import type { ZoomBehavior } from 'd3-zoom';
import type { Transition } from 'd3-transition';

// Utils Types
export type Position = 'left' | 'top' | 'right' | 'bottom';

export type XYPosition = {|
  x: number,
  y: number,
|};

export type XYZPosition = {|
  ...XYPosition,
  z: number,
|};

export type Dimensions = {|
  width: number,
  height: number,
|};

export type Rect = {|
  ...Dimensions,
  ...XYPosition,
|};

export type Box = {|
  ...XYPosition,
  x2: number,
  y2: number,
|};

export type Transform = [number, number, number];

export type CoordinateExtent = [[number, number], [number, number]];

// Node Types
export type NodeBase<NodeData: Object = Object, NodeType: string = string> = {|
  id: string,
  position: XYPosition,
  data: NodeData,
  type?: NodeType,
  sourcePosition?: Position,
  targetPosition?: Position,
  hidden?: boolean,
  selected?: boolean,
  dragging?: boolean,
  draggable?: boolean,
  selectable?: boolean,
  connectable?: boolean,
  deletable?: boolean,
  dragHandle?: string,
  width?: number,
  height?: number,
  initialWidth?: number,
  initialHeight?: number,
  parentId?: string,
  zIndex?: number,
  extent?: 'parent' | CoordinateExtent,
  expandParent?: boolean,
  ariaLabel?: string,
  origin?: NodeOrigin,
  handles?: Array<NodeHandle>,
  measured?: {|
    width?: number,
    height?: number,
  |},
|};

export type InternalNodeBase<NodeType: NodeBase = NodeBase> = {|
  ...NodeType,
  measured: {|
    width?: number,
    height?: number,
  |},
  internals: {|
    positionAbsolute: XYPosition,
    z: number,
    userNode: NodeType,
    handleBounds?: NodeHandleBounds,
    bounds?: NodeBounds,
  |},
|};

export type NodeHandleBounds = {|
  source: Array<Handle> | null,
  target: Array<Handle> | null,
|};

export type NodeBounds = {|
  width: number | null,
  height: number | null,
|};

export type NodeDragItem = {|
  id: string,
  position: XYPosition,
  distance: XYPosition,
  measured: {|
    width: number,
    height: number,
  |},
  width: number,
  height: number,
  internals: {|
    positionAbsolute: XYPosition,
  |},
  positionAbsolute: XYPosition,
  extent?: 'parent' | CoordinateExtent,
  parentId?: string,
  dragging?: boolean,
  origin?: NodeOrigin,
  expandParent?: boolean,
|};

export type NodeOrigin = [number, number];
export type NodeHandle = $Diff<$Shape<Handle>, {| nodeId: any |}>;

// Edge Types
export type EdgeBase<EdgeData: Object = Object, EdgeType: string | void = string | void> = {|
  id: string,
  type?: EdgeType,
  source: string,
  target: string,
  sourceHandle?: string | null,
  targetHandle?: string | null,
  animated?: boolean,
  hidden?: boolean,
  deletable?: boolean,
  selectable?: boolean,
  data?: EdgeData,
  selected?: boolean,
  markerStart?: EdgeMarkerType,
  markerEnd?: EdgeMarkerType,
  zIndex?: number,
  ariaLabel?: string,
  interactionWidth?: number,
|};

export type EdgeMarker = {|
  type: MarkerType,
  color?: string,
  width?: number,
  height?: number,
  markerUnits?: string,
  orient?: string,
  strokeWidth?: number,
|};

export type EdgeMarkerType = string | EdgeMarker;
export type MarkerType = 'arrow' | 'arrowclosed';

export type MarkerProps = {|
  ...EdgeMarker,
  id: string,
|};

export type EdgePosition = {|
  sourceX: number,
  sourceY: number,
  targetX: number,
  targetY: number,
  sourcePosition: Position,
  targetPosition: Position,
|};

// Handle Types
export type Handle = {|
  id?: string,
  position: Position,
  x: number,
  y: number,
  width: number,
  height: number,
  nodeId: string,
  type?: HandleType,
|};

export type HandleType = 'source' | 'target';

// Changes Types
export type NodeChange<NodeType: NodeBase = NodeBase> =
  | NodeDimensionChange
  | NodePositionChange
  | NodeSelectionChange
  | NodeRemoveChange
  | NodeAddChange<NodeType>
  | NodeReplaceChange<NodeType>;

export type EdgeChange<EdgeType: EdgeBase = EdgeBase> =
  | EdgeSelectionChange
  | EdgeRemoveChange
  | EdgeAddChange<EdgeType>
  | EdgeReplaceChange<EdgeType>;

// General Types
export type ConnectionMode = 'strict' | 'loose';
export type PanOnScrollMode = 'free' | 'vertical' | 'horizontal';
export type SelectionMode = 'partial' | 'full';
export type ColorMode = 'light' | 'dark' | 'system';

export type Viewport = {|
  x: number,
  y: number,
  zoom: number,
|};

export type Connection = {|
  source: string,
  target: string,
  sourceHandle: string | null,
  targetHandle: string | null,
|};

export type ConnectionState<NodeType: NodeBase = NodeBase> = NoConnection | ConnectionInProgress<NodeType>;

export type NoConnection = {|
  inProgress: false,
  isValid: null,
  from: null,
  fromHandle: null,
  fromPosition: null,
  fromNode: null,
  to: null,
  toHandle: null,
  toPosition: null,
  toNode: null,
|};

export type ConnectionInProgress<NodeType: NodeBase = NodeBase> = {|
  inProgress: true,
  isValid: boolean | null,
  from: XYPosition,
  fromHandle: Handle,
  fromPosition: Position,
  fromNode: NodeType,
  to: XYPosition,
  toHandle: Handle | null,
  toPosition: Position,
  toNode: NodeType | null,
|};

// Maps and Lookups
export type NodeLookup<NodeType: InternalNodeBase = InternalNodeBase> = Map<string, NodeType>;
export type EdgeLookup<EdgeType: EdgeBase = EdgeBase> = Map<string, EdgeType>;
export type ConnectionLookup = Map<string, Array<string>>;
export type ParentLookup<NodeType: InternalNodeBase = InternalNodeBase> = Map<string, Map<string, NodeType>>;
