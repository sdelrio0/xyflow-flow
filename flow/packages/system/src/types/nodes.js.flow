// @flow

import type { XYPosition, Position, CoordinateExtent } from './utils';
import type { Handle } from './handles';

/**
 * Framework independent node data structure.
 */
export type NodeBase<NodeData: Object = Object, NodeType: string = string> = {|
  /** Unique id of a node */
  id: string,
  /** Position of a node on the pane */
  position: XYPosition,
  /** Arbitrary data passed to a node */
  data: NodeData,
  /** Type of node defined in nodeTypes */
  type?: NodeType,
  /** Only relevant for default, source, target nodeType. controls source position */
  sourcePosition?: Position,
  /** Only relevant for default, source, target nodeType. controls target position */
  targetPosition?: Position,
  hidden?: boolean,
  selected?: boolean,
  /** True, if node is being dragged */
  dragging?: boolean,
  draggable?: boolean,
  selectable?: boolean,
  connectable?: boolean,
  deletable?: boolean,
  dragHandle?: string,
  width?: number,
  height?: number,
  initialWidth?: number,
  initialHeight?: number,
  /** Parent node id, used for creating sub-flows */
  parentId?: string,
  zIndex?: number,
  /** Boundary a node can be moved in */
  extent?: 'parent' | CoordinateExtent,
  expandParent?: boolean,
  ariaLabel?: string,
  /** Origin of the node relative to it's position */
  origin?: NodeOrigin,
  handles?: Array<NodeHandle>,
  measured?: {|
    width?: number,
    height?: number,
  |},
|};

export type InternalNodeBase<NodeType: NodeBase = NodeBase> = {|
  ...NodeType,
  measured: {|
    width?: number,
    height?: number,
  |},
  internals: {|
    positionAbsolute: XYPosition,
    z: number,
    /** Holds a reference to the original node object provided by the user.
     * Used as an optimization to avoid certain operations. */
    userNode: NodeType,
    handleBounds?: NodeHandleBounds,
    bounds?: NodeBounds,
  |},
|};

/**
 * The node data structure that gets used for the nodes prop.
 */
export type NodeProps<NodeType: NodeBase> = {|
  ...Pick<NodeType,
    | 'id'
    | 'data'
    | 'width'
    | 'height'
    | 'sourcePosition'
    | 'targetPosition'
    | 'selected'
    | 'dragHandle'
    | 'selectable'
    | 'deletable'
    | 'draggable'>,
  isConnectable: boolean,
  positionAbsoluteX: number,
  positionAbsoluteY: number,
|};

export type NodeHandleBounds = {|
  source: Array<Handle> | null,
  target: Array<Handle> | null,
|};

export type InternalNodeUpdate = {|
  id: string,
  nodeElement: HTMLDivElement,
  force?: boolean,
|};

export type NodeBounds = {|
  width: number | null,
  height: number | null,
|};

export type NodeDragItem = {|
  id: string,
  position: XYPosition,
  distance: XYPosition,
  measured: {|
    width: number,
    height: number,
  |},
  width: number,
  height: number,
  internals: {|
    positionAbsolute: XYPosition,
  |},
  positionAbsolute: XYPosition,
  extent?: 'parent' | CoordinateExtent,
  parentId?: string,
  dragging?: boolean,
  origin?: NodeOrigin,
  expandParent?: boolean,
|};

export type NodeOrigin = [number, number];

export type OnSelectionDrag = (event: MouseEvent, nodes: Array<NodeBase>) => void;

export type NodeHandle = $Diff<$Shape<Handle, 'width' | 'height'>, {| nodeId: any |}>;

export type Align = 'center' | 'start' | 'end';

export type NodeLookup<NodeType: InternalNodeBase = InternalNodeBase> = Map<string, NodeType>;
export type ParentLookup<NodeType: InternalNodeBase = InternalNodeBase> = Map<string, Map<string, NodeType>>;
