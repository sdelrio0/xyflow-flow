// @flow

import type { Position } from './utils';

export type EdgeBase<EdgeData: Object = Object, EdgeType: string | void = string | void> = {|
  /** Unique id of an edge */
  id: string,
  /** Type of an edge defined in edgeTypes */
  type?: EdgeType,
  /** Id of source node */
  source: string,
  /** Id of target node */
  target: string,
  /** Id of source handle */
  sourceHandle?: string | null,
  /** Id of target handle */
  targetHandle?: string | null,
  animated?: boolean,
  hidden?: boolean,
  deletable?: boolean,
  selectable?: boolean,
  /** Arbitrary data passed to an edge */
  data?: EdgeData,
  selected?: boolean,
  /** Set the marker on the beginning of an edge */
  markerStart?: EdgeMarkerType,
  /** Set the marker on the end of an edge */
  markerEnd?: EdgeMarkerType,
  zIndex?: number,
  ariaLabel?: string,
  /** Padding around the edge where interaction is still possible */
  interactionWidth?: number,
|};

export type SmoothStepPathOptions = {|
  offset?: number,
  borderRadius?: number,
|};

export type StepPathOptions = {|
  offset?: number,
|};

export type BezierPathOptions = {|
  curvature?: number,
|};

export type DefaultEdgeOptionsBase<EdgeType: EdgeBase> = $Diff<EdgeType, {|
  id: any,
  source: any,
  target: any,
  sourceHandle: any,
  targetHandle: any,
  selected: any,
|}>;

export type ConnectionLineType = 
  | 'default'    // Bezier
  | 'straight'
  | 'step'
  | 'smoothstep'
  | 'simplebezier';

export type EdgeMarker = {|
  type: MarkerType,
  color?: string,
  width?: number,
  height?: number,
  markerUnits?: string,
  orient?: string,
  strokeWidth?: number,
|};

export type EdgeMarkerType = string | EdgeMarker;

export type MarkerType = 'arrow' | 'arrowclosed';

export type MarkerProps = {|
  ...EdgeMarker,
  id: string,
|};

export type EdgePosition = {|
  sourceX: number,
  sourceY: number,
  targetX: number,
  targetY: number,
  sourcePosition: Position,
  targetPosition: Position,
|};

export type EdgeLookup<EdgeType: EdgeBase = EdgeBase> = Map<string, EdgeType>;
