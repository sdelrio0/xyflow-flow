// @flow

import type { Selection as D3Selection } from 'd3-selection';
import type { D3DragEvent, SubjectPosition } from 'd3-drag';
import type { ZoomBehavior } from 'd3-zoom';
// this is needed for the Selection type to include the transition function
import type { Transition } from 'd3-transition';

import type { XYPosition, Rect, Position } from './utils';
import type { InternalNodeBase, NodeBase, NodeDragItem } from './nodes';
import type { Handle, HandleType } from './handles';
import type { PanZoomInstance } from './panzoom';
import type { EdgeBase } from '..';

export type Project = (position: XYPosition) => XYPosition;

export type OnMove = (event: MouseEvent | TouchEvent | null, viewport: Viewport) => void;
export type OnMoveStart = OnMove;
export type OnMoveEnd = OnMove;

export type ZoomInOut = (options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type ZoomTo = (zoomLevel: number, options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type GetZoom = () => number;
export type GetViewport = () => Viewport;
export type SetViewport = (viewport: Viewport, options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type SetCenter = (x: number, y: number, options?: SetCenterOptions) => Promise<boolean>;
export type FitBounds = (bounds: Rect, options?: FitBoundsOptions) => Promise<boolean>;

export type Connection = {|
  source: string,
  target: string,
  sourceHandle: string | null,
  targetHandle: string | null,
|};

export type HandleConnection = {|
  ...Connection,
  edgeId: string,
|};

// Flow doesn't have enums, so we'll use string literals
export type ConnectionMode = 'strict' | 'loose';

export type OnConnectStartParams = {|
  nodeId: string | null,
  handleId: string | null,
  handleType: HandleType | null,
|};

export type OnConnectStart = (event: MouseEvent | TouchEvent, params: OnConnectStartParams) => void;

export type OnConnectEnd = (event: MouseEvent | TouchEvent) => void;

export type IsValidConnection = (connection: Connection) => boolean;

export type FitViewParamsBase<NodeType: NodeBase = NodeBase> = {|
  nodes: Map<string, InternalNodeBase<NodeType>>,
  width: number,
  height: number,
  panZoom: PanZoomInstance,
  minZoom: number,
  maxZoom: number,
|};

export type FitViewOptionsBase<NodeType: NodeBase = NodeBase> = {|
  padding?: number,
  includeHiddenNodes?: boolean,
  minZoom?: number,
  maxZoom?: number,
  duration?: number,
  nodes?: Array<NodeType | {| id: string |}>,
  id?: string,
|};

export type Viewport = {|
  x: number,
  y: number,
  zoom: number,
|};

export type KeyCode = string;

export type SnapGrid = [number, number];

// Flow equivalent of enum
export type PanOnScrollMode = 'free' | 'vertical' | 'horizontal';

export type ViewportHelperFunctionOptions = {|
  duration?: number,
|};

export type SetCenterOptions = {|
  zoom?: number,
|};

export type FitBoundsOptions = {|
  padding?: number,
|};

export type OnViewportChange = (viewport: Viewport) => void;

export type D3ZoomInstance = ZoomBehavior<Element, unknown>;
export type D3SelectionInstance = D3Selection<Element, unknown, null, undefined>;
export type D3ZoomHandler = (this: Element, event: any, d: unknown) => void;

export type UpdateNodeInternals = (nodeId: string) => void;

export type PanelPosition = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';

export type ProOptions = {|
  account?: string,
  hideAttribution: boolean,
|};

export type UseDragEvent = MouseEvent | TouchEvent;

// Flow equivalent of enum
export type SelectionMode = 'partial' | 'full';

export type SelectionRect = {|
  startX: number,
  startY: number,
  x: number,
  y: number,
|};

export type OnError = (error: Error) => void;

export type UpdateNodePositions = () => void;

export type PanBy = (position: XYPosition) => void;

export type NoConnection = {|
  inProgress: false,
  isValid: null,
  from: null,
  fromHandle: null,
  fromPosition: null,
  fromNode: null,
  to: null,
  toHandle: null,
  toPosition: null,
  toNode: null,
|};

export type ConnectionInProgress<NodeType: NodeBase = NodeBase> = {|
  inProgress: true,
  isValid: boolean | null,
  from: XYPosition,
  fromHandle: Handle,
  fromPosition: Position,
  fromNode: NodeType,
  to: XYPosition,
  toHandle: Handle | null,
  toPosition: Position,
  toNode: NodeType | null,
|};

export type ConnectionState<NodeType: NodeBase = NodeBase> = NoConnection | ConnectionInProgress<NodeType>;

export type FinalConnectionState<NodeType: NodeBase = NodeBase> = {|
  connectionPosition: XYPosition,
  connectionStatus: ConnectionState<NodeType>,
|};

export type UpdateConnection<NodeType: NodeBase = NodeBase> = (params: FinalConnectionState<NodeType>) => void;

export type ColorModeClass = 'light' | 'dark';

export type ColorMode = 'light' | 'dark' | 'system';

export type ConnectionLookup = Map<string, Array<string>>;

export type OnBeforeDelete<NodeType: NodeBase = NodeBase, EdgeType: EdgeBase = EdgeBase> = {|
  nodes: Array<NodeType>,
  edges: Array<EdgeType>,
|};
