// @flow

import type { CSSProperties, MouseEvent as ReactMouseEvent } from 'react';
import type {
  ConnectionMode,
  ConnectionLineType,
  CoordinateExtent,
  KeyCode,
  PanOnScrollMode,
  ProOptions,
  PanelPosition,
  OnMove,
  OnMoveStart,
  OnMoveEnd,
  Viewport,
  NodeOrigin,
  HandleType,
  SelectionMode,
  OnError,
  ColorMode,
  SnapGrid,
  OnConnect,
  OnConnectStart,
  OnConnectEnd,
  IsValidConnection,
} from '../../system/src/types/general';

import type {
  OnSelectionChangeFunc,
  NodeTypes,
  EdgeTypes,
  Node,
  Edge,
  ConnectionLineComponent,
  OnReconnect,
  OnInit,
  DefaultEdgeOptions,
  FitViewOptions,
  OnNodesDelete,
  OnEdgesDelete,
  OnDelete,
  OnNodesChange,
  OnEdgesChange,
  NodeMouseHandler,
  SelectionDragHandler,
  EdgeMouseHandler,
  OnNodeDrag,
  OnBeforeDelete,
} from '.';

/**
 * ReactFlow component props.
 */
export type ReactFlowProps<
  NodeType: Node = Node,
  EdgeType: Edge = Edge,
> = {|
  nodes?: Array<NodeType>,
  edges?: Array<EdgeType>,
  defaultNodes?: Array<NodeType>,
  defaultEdges?: Array<EdgeType>,
  defaultEdgeOptions?: DefaultEdgeOptions,
  onNodeClick?: NodeMouseHandler<NodeType>,
  onNodeDoubleClick?: NodeMouseHandler<NodeType>,
  onNodeMouseEnter?: NodeMouseHandler<NodeType>,
  onNodeMouseMove?: NodeMouseHandler<NodeType>,
  onNodeMouseLeave?: NodeMouseHandler<NodeType>,
  onNodeContextMenu?: NodeMouseHandler<NodeType>,
  onNodeDragStart?: OnNodeDrag<NodeType>,
  onNodeDrag?: OnNodeDrag<NodeType>,
  onNodeDragStop?: OnNodeDrag<NodeType>,
  onEdgeClick?: (event: ReactMouseEvent, edge: EdgeType) => void,
  onEdgeContextMenu?: EdgeMouseHandler<EdgeType>,
  onEdgeMouseEnter?: EdgeMouseHandler<EdgeType>,
  onEdgeMouseMove?: EdgeMouseHandler<EdgeType>,
  onEdgeMouseLeave?: EdgeMouseHandler<EdgeType>,
  onEdgeDoubleClick?: EdgeMouseHandler<EdgeType>,
  onReconnect?: OnReconnect<EdgeType>,
  onReconnectStart?: (event: ReactMouseEvent, edge: EdgeType, handleType: HandleType) => void,
  onReconnectEnd?: (event: MouseEvent | TouchEvent, edge: EdgeType, handleType: HandleType) => void,
  onNodesChange?: OnNodesChange<NodeType>,
  onEdgesChange?: OnEdgesChange<EdgeType>,
  onNodesDelete?: OnNodesDelete<NodeType>,
  onEdgesDelete?: OnEdgesDelete<EdgeType>,
  onDelete?: OnDelete<NodeType, EdgeType>,
  onSelectionDragStart?: SelectionDragHandler<NodeType>,
  onSelectionDrag?: SelectionDragHandler<NodeType>,
  onSelectionDragStop?: SelectionDragHandler<NodeType>,
  onSelectionStart?: (event: ReactMouseEvent) => void,
  onSelectionEnd?: (event: ReactMouseEvent) => void,
  onSelectionContextMenu?: (event: ReactMouseEvent, nodes: Array<NodeType>) => void,
  onConnect?: OnConnect,
  onConnectStart?: OnConnectStart,
  onConnectEnd?: OnConnectEnd,
  onClickConnectStart?: OnConnectStart,
  onClickConnectEnd?: OnConnectEnd,
  onInit?: OnInit<NodeType, EdgeType>,
  onMove?: OnMove,
  onMoveStart?: OnMoveStart,
  onMoveEnd?: OnMoveEnd,
  onSelectionChange?: OnSelectionChangeFunc,
  onPaneScroll?: (event?: WheelEvent) => void,
  onPaneClick?: (event: ReactMouseEvent) => void,
  onPaneContextMenu?: (event: ReactMouseEvent | MouseEvent) => void,
  onPaneMouseEnter?: (event: ReactMouseEvent) => void,
  onPaneMouseMove?: (event: ReactMouseEvent) => void,
  onPaneMouseLeave?: (event: ReactMouseEvent) => void,
  paneClickDistance?: number,
  nodeClickDistance?: number,
  onBeforeDelete?: OnBeforeDelete<NodeType, EdgeType>,
  nodeTypes?: NodeTypes,
  edgeTypes?: EdgeTypes,
  connectionLineType?: ConnectionLineType,
  connectionLineStyle?: CSSProperties,
  connectionLineComponent?: ConnectionLineComponent,
  connectionLineContainerStyle?: CSSProperties,
  connectionMode?: ConnectionMode,
  deleteKeyCode?: KeyCode | null,
  selectionKeyCode?: KeyCode | null,
  selectionOnDrag?: boolean,
  selectionMode?: SelectionMode,
  panActivationKeyCode?: KeyCode | null,
  multiSelectionKeyCode?: KeyCode | null,
  zoomActivationKeyCode?: KeyCode | null,
  snapToGrid?: boolean,
  snapGrid?: SnapGrid,
  onlyRenderVisibleElements?: boolean,
  nodesDraggable?: boolean,
  nodesConnectable?: boolean,
  nodesFocusable?: boolean,
  nodeOrigin?: NodeOrigin,
  edgesFocusable?: boolean,
  edgesReconnectable?: boolean,
  elementsSelectable?: boolean,
  selectNodesOnDrag?: boolean,
  panOnDrag?: boolean | Array<number>,
  minZoom?: number,
  maxZoom?: number,
  viewport?: Viewport,
  defaultViewport?: Viewport,
  onViewportChange?: (viewport: Viewport) => void,
  translateExtent?: CoordinateExtent,
  preventScrolling?: boolean,
  nodeExtent?: CoordinateExtent,
  defaultMarkerColor?: string,
  zoomOnScroll?: boolean,
  zoomOnPinch?: boolean,
  panOnScroll?: boolean,
  panOnScrollSpeed?: number,
  panOnScrollMode?: PanOnScrollMode,
  zoomOnDoubleClick?: boolean,
  reconnectRadius?: number,
  noDragClassName?: string,
  noWheelClassName?: string,
  noPanClassName?: string,
  fitView?: boolean,
  fitViewOptions?: FitViewOptions,
  connectOnClick?: boolean,
  attributionPosition?: PanelPosition,
  proOptions?: ProOptions,
  elevateNodesOnSelect?: boolean,
  elevateEdgesOnSelect?: boolean,
  disableKeyboardA11y?: boolean,
  autoPanOnNodeDrag?: boolean,
  autoPanOnConnect?: boolean,
  autoPanSpeed?: number,
  connectionRadius?: number,
  onError?: OnError,
  isValidConnection?: IsValidConnection<EdgeType>,
  nodeDragThreshold?: number,
  width?: number,
  height?: number,
  colorMode?: ColorMode,
  debug?: boolean,
|};
