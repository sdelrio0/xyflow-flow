// @flow

import type {
  ConnectionMode,
  ConnectionState,
  CoordinateExtent,
  InternalNodeUpdate,
  UpdateNodePositions,
  NodeOrigin,
  OnConnect,
  OnError,
  OnViewportChange,
  SelectionRect,
  SnapGrid,
  Handle,
  Transform,
  PanZoomInstance,
  PanBy,
  OnConnectStart,
  OnConnectEnd,
  OnSelectionDrag,
  OnMoveStart,
  OnMove,
  OnMoveEnd,
  UpdateConnection,
  EdgeLookup,
  ConnectionLookup,
  NodeLookup,
  NodeChange,
  EdgeChange,
  ParentLookup,
} from '../../system/src/types/general';

import type {
  Edge,
  Node,
  OnNodesChange,
  OnEdgesChange,
  DefaultEdgeOptions,
  FitViewOptions,
  OnNodesDelete,
  OnEdgesDelete,
  OnSelectionChangeFunc,
  UnselectNodesAndEdgesParams,
  OnDelete,
  OnNodeDrag,
  OnBeforeDelete,
  IsValidConnection,
  InternalNode,
} from '.';

export type ReactFlowStore<NodeType: Node = Node, EdgeType: Edge = Edge> = {|
  rfId: string,
  width: number,
  height: number,
  transform: Transform,
  nodeOrigin: NodeOrigin,
  nodes: NodeLookup<InternalNode<NodeType>>,
  edges: EdgeLookup<EdgeType>,
  onNodesChange: OnNodesChange<NodeType> | null,
  onEdgesChange: OnEdgesChange<EdgeType> | null,
  onNodeDrag: OnNodeDrag<NodeType> | null,
  hasDefaultNodes: boolean,
  hasDefaultEdges: boolean,
  defaultViewport: Transform,
  node: NodeLookup<InternalNode<NodeType>>,
  nodeLookup: NodeLookup<InternalNode<NodeType>>,
  edgeLookup: EdgeLookup<EdgeType>,
  connectionLookup: ConnectionLookup,
  parentLookup: ParentLookup<InternalNode<NodeType>>,
  selectedNodes: Set<string>,
  selectedEdges: Set<string>,
  minZoom: number,
  maxZoom: number,
  translateExtent: CoordinateExtent,
  nodeExtent: CoordinateExtent,
  defaultEdgeOptions: DefaultEdgeOptions | null,
  connectionMode: ConnectionMode,
  snapToGrid: boolean,
  snapGrid: SnapGrid,
  nodesDraggable: boolean,
  nodesConnectable: boolean,
  nodesFocusable: boolean,
  edgesFocusable: boolean,
  edgesUpdatable: boolean,
  elementsSelectable: boolean,
  selectNodesOnDrag: boolean,
  multiSelectionActive: boolean,
  connectionStartHandle: Handle | null,
  connectionEndHandle: Handle | null,
  connectionStatus: ConnectionState<InternalNode<NodeType>>,
  panZoom: PanZoomInstance | null,
  onConnect: OnConnect | null,
  onConnectStart: OnConnectStart | null,
  onConnectEnd: OnConnectEnd | null,
  onClickConnectStart: OnConnectStart | null,
  onClickConnectEnd: OnConnectEnd | null,
  connectOnClick: boolean,
  isValidConnection: IsValidConnection<EdgeType> | null,
  connectionRadius: number,
  onError: OnError | null,
  onNodeDragStart: OnNodeDrag<NodeType> | null,
  onNodeDragStop: OnNodeDrag<NodeType> | null,
  onNodesDelete: OnNodesDelete<NodeType> | null,
  onEdgesDelete: OnEdgesDelete<EdgeType> | null,
  onDelete: OnDelete<NodeType, EdgeType> | null,
  onBeforeDelete: OnBeforeDelete<NodeType, EdgeType> | null,
  onMoveStart: OnMoveStart | null,
  onMove: OnMove | null,
  onMoveEnd: OnMoveEnd | null,
  onSelectionDrag: OnSelectionDrag | null,
  onSelectionDragStart: OnSelectionDrag | null,
  onSelectionDragStop: OnSelectionDrag | null,
  onSelectionChange: OnSelectionChangeFunc | null,
  onViewportChange: OnViewportChange | null,
  selectionRect: SelectionRect | null,
  userSelectionActive: boolean,
  userSelectionRect: SelectionRect | null,
  debug: boolean,
|};

export type ReactFlowActions = {|
  setNodes: (nodes: Array<NodeType>) => void,
  setEdges: (edges: Array<EdgeType>) => void,
  setDefaultNodesAndEdges: (nodes?: Array<NodeType>, edges?: Array<EdgeType>) => void,
  updateNodeInternals: (updates: Map<string, InternalNodeUpdate>, params?: {| triggerFitView: boolean |}) => void,
  updateNodePositions: UpdateNodePositions,
  resetSelectedElements: () => void,
  unselectNodesAndEdges: (params?: UnselectNodesAndEdgesParams) => void,
  addSelectedNodes: (nodeIds: Array<string>) => void,
  addSelectedEdges: (edgeIds: Array<string>) => void,
  setMinZoom: (minZoom: number) => void,
  setMaxZoom: (maxZoom: number) => void,
  setTranslateExtent: (translateExtent: CoordinateExtent) => void,
  setNodeExtent: (nodeExtent: CoordinateExtent) => void,
  cancelConnection: () => void,
  updateConnection: UpdateConnection<InternalNode<NodeType>>,
  reset: () => void,
  triggerNodeChanges: (changes: Array<NodeChange<NodeType>>) => void,
  triggerEdgeChanges: (changes: Array<EdgeChange<EdgeType>>) => void,
  panBy: PanBy,
  fitView: (options?: FitViewOptions) => Promise<boolean>,
  fitViewSync: (options?: FitViewOptions) => boolean,
  setPaneClickDistance: (distance: number) => void,
|};

export type ReactFlowState<NodeType: Node = Node, EdgeType: Edge = Edge> = {|
  ...ReactFlowStore<NodeType, EdgeType>,
  ...ReactFlowActions,
|};
