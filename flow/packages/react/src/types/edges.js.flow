// @flow

import type { CSSProperties, MouseEvent as ReactMouseEvent, ComponentType } from 'react';
import type {
  EdgeBase,
  BezierPathOptions,
  Position,
  SmoothStepPathOptions,
  DefaultEdgeOptionsBase,
  HandleType,
  Connection,
  ConnectionLineType,
  Handle,
  EdgePosition,
  StepPathOptions,
  OnError,
  ConnectionState,
  FinalConnectionState,
} from '../../system/src/types/general';

import type { EdgeTypes } from './general';
import type { InternalNode, Node } from './nodes';

export type EdgeLabelOptions = {|
  label?: string | React$Node,
  labelStyle?: CSSProperties,
  labelShowBg?: boolean,
  labelBgStyle?: CSSProperties,
  labelBgPadding?: [number, number],
  labelBgBorderRadius?: number,
|};

/**
 * The Edge type is mainly used for the `edges` that get passed to the ReactFlow component
 */
export type Edge<EdgeData: Object = Object, EdgeType: string | void = string | void> = {|
  ...EdgeBase<EdgeData, EdgeType>,
  ...EdgeLabelOptions,
  style?: CSSProperties,
  className?: string,
  reconnectable?: boolean | HandleType,
  focusable?: boolean,
|};

export type SmoothStepEdge<EdgeData: Object = Object> = {|
  ...Edge<EdgeData, 'smoothstep'>,
  pathOptions?: SmoothStepPathOptions,
|};

export type BezierEdge<EdgeData: Object = Object> = {|
  ...Edge<EdgeData, 'default'>,
  pathOptions?: BezierPathOptions,
|};

export type StepEdge<EdgeData: Object = Object> = {|
  ...Edge<EdgeData, 'step'>,
  pathOptions?: StepPathOptions,
|};

export type StraightEdge<EdgeData: Object = Object> = Edge<EdgeData, 'straight'>;

export type BuiltInEdge = SmoothStepEdge | BezierEdge | StepEdge | StraightEdge;

export type EdgeMouseHandler<EdgeType: Edge = Edge> = (event: ReactMouseEvent, edge: EdgeType) => void;

export type EdgeWrapperProps<EdgeType: Edge = Edge> = {|
  id: string,
  edgesFocusable: boolean,
  edgesReconnectable: boolean,
  elementsSelectable: boolean,
  noPanClassName: string,
  onClick?: EdgeMouseHandler<EdgeType>,
  onDoubleClick?: EdgeMouseHandler<EdgeType>,
  onReconnect?: OnReconnect<EdgeType>,
  onContextMenu?: EdgeMouseHandler<EdgeType>,
  onMouseEnter?: EdgeMouseHandler<EdgeType>,
  onMouseMove?: EdgeMouseHandler<EdgeType>,
  onMouseLeave?: EdgeMouseHandler<EdgeType>,
  reconnectRadius?: number,
  onReconnectStart?: (event: ReactMouseEvent, edge: EdgeType, handleType: HandleType) => void,
  onReconnectEnd?: (
    event: MouseEvent | TouchEvent,
    edge: EdgeType,
    handleType: HandleType,
    connectionState: FinalConnectionState
  ) => void,
  rfId?: string,
  edgeTypes?: EdgeTypes,
  onError?: OnError,
  disableKeyboardA11y?: boolean,
|};

export type DefaultEdgeOptions<EdgeType: Edge = Edge> = DefaultEdgeOptionsBase<EdgeType>;

export type EdgeTextProps = {|
  x: number,
  y: number,
  label?: string | React$Node,
  labelStyle?: CSSProperties,
  labelShowBg?: boolean,
  labelBgStyle?: CSSProperties,
  labelBgPadding?: [number, number],
  labelBgBorderRadius?: number,
|};

/**
 * Custom edge component props
 */
export type EdgeProps<EdgeData: Object = Object> = {|
  id: string,
  sourceX: number,
  sourceY: number,
  targetX: number,
  targetY: number,
  sourcePosition: Position,
  targetPosition: Position,
  sourceHandleId?: string | null,
  targetHandleId?: string | null,
  markerStart?: string,
  markerEnd?: string,
  data?: EdgeData,
  style?: CSSProperties,
  pathOptions?: any,
  interactionWidth?: number,
|};

/**
 * BaseEdge component props
 */
export type BaseEdgeProps = {|
  id?: string,
  interactionWidth?: number,
  className?: string,
  labelX?: number,
  labelY?: number,
  markerStart?: string,
  markerEnd?: string,
  path: string,
  style?: CSSProperties,
  label?: string | React$Node,
  labelStyle?: CSSProperties,
  labelShowBg?: boolean,
  labelBgStyle?: CSSProperties,
  labelBgPadding?: [number, number],
  labelBgBorderRadius?: number,
|};

/**
 * Helper type for edge components that get exported by the library
 */
export type EdgeComponentProps = {|
  id?: $PropertyType<EdgeProps, 'id'>,
  markerStart?: $PropertyType<EdgeProps, 'markerStart'>,
  markerEnd?: $PropertyType<EdgeProps, 'markerEnd'>,
  interactionWidth?: $PropertyType<EdgeProps, 'interactionWidth'>,
  style?: $PropertyType<EdgeProps, 'style'>,
  sourceHandleId?: $PropertyType<EdgeProps, 'sourceHandleId'>,
  targetHandleId?: $PropertyType<EdgeProps, 'targetHandleId'>,
|};

export type EdgeComponentWithPathOptions<PathOptions> = {|
  ...EdgeComponentProps,
  pathOptions?: PathOptions,
|};

export type BezierEdgeProps = EdgeComponentWithPathOptions<BezierPathOptions>;
export type SmoothStepEdgeProps = EdgeComponentWithPathOptions<SmoothStepPathOptions>;
export type StepEdgeProps = EdgeComponentWithPathOptions<StepPathOptions>;
export type StraightEdgeProps = EdgeComponentProps;
export type SimpleBezierEdgeProps = EdgeComponentProps;

export type OnReconnect<EdgeType: Edge = Edge> = (edge: EdgeType, connection: Connection) => void;

export type ConnectionLineComponentProps<NodeType: Node = Node> = {|
  connectionLineStyle?: CSSProperties,
  connectionLineType: ConnectionLineType,
  fromNode: InternalNode<NodeType>,
  fromHandle: Handle,
  fromX: number,
  fromY: number,
  toX: number,
  toY: number,
  fromPosition: Position,
  toPosition: Position,
  connectionStatus: 'valid' | 'invalid' | null,
  toNode: InternalNode<NodeType> | null,
  toHandle: Handle | null,
|};

export type ConnectionLineComponent = ComponentType<ConnectionLineComponentProps>;
