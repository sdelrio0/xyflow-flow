// @flow

import type {
  ConnectionMode,
  ConnectionState,
  CoordinateExtent,
  InternalNodeUpdate,
  UpdateNodePositions,
  NodeOrigin,
  OnConnect,
  OnError,
  OnViewportChange,
  SelectionRect,
  SnapGrid,
  Handle,
  Transform,
  PanZoomInstance,
  PanBy,
  OnConnectStart,
  OnConnectEnd,
  OnSelectionDrag,
  OnMoveStart,
  OnMove,
  OnMoveEnd,
  UpdateConnection,
  EdgeLookup,
  ConnectionLookup,
  NodeLookup,
  NodeChange,
  EdgeChange,
  ParentLookup,
} from './system';

import type {
  Edge,
  Node,
  OnNodesChange,
  OnEdgesChange,
  DefaultEdgeOptions,
  FitViewOptions,
  OnNodesDelete,
  OnEdgesDelete,
  OnSelectionChangeFunc,
  UnselectNodesAndEdgesParams,
  OnDelete,
  OnNodeDrag,
  OnBeforeDelete,
  IsValidConnection,
  InternalNode,
} from './index';

export type ReactFlowStore<NodeType: Node = Node, EdgeType: Edge = Edge> = {
  rfId: string,
  width: number,
  height: number,
  transform: Transform,
  nodes: Array<NodeType>,
  nodeLookup: NodeLookup<InternalNode<NodeType>>,
  parentLookup: ParentLookup<InternalNode<NodeType>>,
  edges: Array<EdgeType>,
  edgeLookup: EdgeLookup<EdgeType>,
  connectionLookup: ConnectionLookup,
  onNodesChange: OnNodesChange<NodeType> | null,
  onEdgesChange: OnEdgesChange<EdgeType> | null,
  hasDefaultNodes: boolean,
  hasDefaultEdges: boolean,
  domNode: HTMLDivElement | null,
  paneDragging: boolean,
  noPanClassName: string,

  panZoom: PanZoomInstance | null,
  minZoom: number,
  maxZoom: number,
  translateExtent: CoordinateExtent,
  nodeExtent: CoordinateExtent,
  nodeOrigin: NodeOrigin,
  nodeDragThreshold: number,

  nodesSelectionActive: boolean,
  userSelectionActive: boolean,
  userSelectionRect: SelectionRect | null,

  connection: ConnectionState<InternalNode<NodeType>>,
  connectionMode: ConnectionMode,
  connectionClickStartHandle: ({
    nodeId: $PropertyType<Handle, 'nodeId'>,
    id: $PropertyType<Handle, 'id'>,
    type: $PropertyType<Handle, 'type'>,
  }) | null,

  snapToGrid: boolean,
  snapGrid: SnapGrid,

  nodesDraggable: boolean,
  nodesConnectable: boolean,
  nodesFocusable: boolean,
  edgesFocusable: boolean,
  edgesReconnectable: boolean,
  elementsSelectable: boolean,
  elevateNodesOnSelect: boolean,
  elevateEdgesOnSelect: boolean,
  selectNodesOnDrag: boolean,

  multiSelectionActive: boolean,

  onNodeDragStart?: OnNodeDrag<NodeType>,
  onNodeDrag?: OnNodeDrag<NodeType>,
  onNodeDragStop?: OnNodeDrag<NodeType>,
  onSelectionDragStart?: OnSelectionDrag,
  onSelectionDrag?: OnSelectionDrag,
  onSelectionDragStop?: OnSelectionDrag,
  onMoveStart?: OnMoveStart,
  onMove?: OnMove,
  onMoveEnd?: OnMoveEnd,
  onConnect?: OnConnect,
  onConnectStart?: OnConnectStart,
  onConnectEnd?: OnConnectEnd,
  onClickConnectStart?: OnConnectStart,
  onClickConnectEnd?: OnConnectEnd,
  onNodesDelete?: OnNodesDelete<NodeType>,
  onEdgesDelete?: OnEdgesDelete<EdgeType>,
  onDelete?: OnDelete<NodeType, EdgeType>,
  onBeforeDelete?: OnBeforeDelete<NodeType, EdgeType>,
  onSelectionChange?: OnSelectionChangeFunc,
  onError?: OnError,
  isValidConnection?: IsValidConnection,

  connectOnClick: boolean,
  defaultEdgeOptions?: DefaultEdgeOptions,
};

export type ReactFlowActions<NodeType: Node = Node, EdgeType: Edge = Edge> = {
  setNodes: (nodes: Array<NodeType>) => void,
  setEdges: (edges: Array<EdgeType>) => void,
  setDefaultNodesAndEdges: (nodes?: Array<NodeType>, edges?: Array<EdgeType>) => void,
  updateNodeInternals: (updates: Map<string, InternalNodeUpdate>, params?: { triggerFitView: boolean }) => void,
  updateNodePositions: UpdateNodePositions,
  resetSelectedElements: () => void,
  unselectNodesAndEdges: (params?: UnselectNodesAndEdgesParams) => void,
  addSelectedNodes: (nodeIds: Array<string>) => void,
  addSelectedEdges: (edgeIds: Array<string>) => void,
  setMinZoom: (minZoom: number) => void,
  setMaxZoom: (maxZoom: number) => void,
  setTranslateExtent: (translateExtent: CoordinateExtent) => void,
  setNodeExtent: (nodeExtent: CoordinateExtent) => void,
  cancelConnection: () => void,
  updateConnection: UpdateConnection<InternalNode<NodeType>>,
  reset: () => void,
  triggerNodeChanges: (changes: Array<NodeChange<NodeType>>) => void,
  triggerEdgeChanges: (changes: Array<EdgeChange<EdgeType>>) => void,
  panBy: PanBy,
  fitView: (options?: FitViewOptions) => Promise<boolean>,
  fitViewSync: (options?: FitViewOptions) => boolean,
  setPaneClickDistance: (distance: number) => void,
};

export type ReactFlowState<NodeType: Node = Node, EdgeType: Edge = Edge> = ReactFlowStore<NodeType, EdgeType> &
  ReactFlowActions<NodeType, EdgeType>;
