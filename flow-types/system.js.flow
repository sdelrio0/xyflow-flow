// @flow strict

// Core types
export type Align = 'start' | 'center' | 'end';
export type PanOnScrollMode = 'free' | 'vertical' | 'horizontal';
export type SelectionMode = 'partial' | 'full';
export type ColorMode = 'light' | 'dark';
export type ColorModeClass = 'light' | 'dark' | 'system';

// Path and marker types
export type SmoothStepPathOptions = {|
  offset?: number,
  borderRadius?: number,
|};

export type BezierPathOptions = {|
  curvature?: number,
|};

export type EdgeMarkerType = 'arrow' | 'arrowclosed';

export type EdgeMarker = {|
  type: EdgeMarkerType,
  color?: string,
  width?: number,
  height?: number,
  markerUnits?: string,
  orient?: string,
  strokeWidth?: number,
|};

// Event handlers and callbacks
export type OnMove = (event: MouseEvent | TouchEvent, viewport: Viewport) => void;
export type OnMoveStart = OnMove;
export type OnMoveEnd = OnMove;

export type OnConnectStartParams = {|
  nodeId: string | null,
  handleId: string | null,
  handleType: 'source' | 'target',
|};

export type OnConnectStart = (event: MouseEvent | TouchEvent, params: OnConnectStartParams) => void;
export type OnConnect = (connection: Connection) => void;
export type OnConnectEnd = (event: MouseEvent | TouchEvent) => void;

// Viewport and positioning
export type Viewport = {|
  x: number,
  y: number,
  zoom: number,
|};

export type SnapGrid = [number, number];

export type ViewportHelperFunctionOptions = {|
  duration?: number,
|};

export type SetCenterOptions = {|
  ...ViewportHelperFunctionOptions,
  zoom?: number,
|};

export type FitBoundsOptions = {|
  ...ViewportHelperFunctionOptions,
  padding?: number,
  includeHiddenNodes?: boolean,
  minZoom?: number,
  maxZoom?: number,
|};

// UI and layout
export type PanelPosition = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';

export type ProOptions = {|
  account?: string,
  hideAttribution?: boolean,
|};

export type SelectionRect = {|
  x: number,
  y: number,
  width: number,
  height: number,
|};

// Error handling
export type OnError = (id: string, message: string) => void;

// Node positioning and resizing
export type NodeOrigin = [number, number];

export type OnSelectionDrag = (event: MouseEvent, nodes: Array<Node>) => void;

export type HandleType = 'source' | 'target';

export type ShouldResize = (event: MouseEvent | TouchEvent, params: ResizeParams) => boolean;
export type OnResizeStart = (event: MouseEvent | TouchEvent, params: ResizeParams) => void;
export type OnResize = (event: MouseEvent | TouchEvent, params: ResizeParamsWithDirection) => void;
export type OnResizeEnd = (event: MouseEvent | TouchEvent, params: ResizeParams) => void;

export type ControlPosition = 'top' | 'right' | 'bottom' | 'left' | 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
export type ControlLinePosition = 'top' | 'right' | 'bottom' | 'left';
export type ResizeControlVariant = 'handle' | 'line';

export type ResizeParams = {|
  x: number,
  y: number,
  width: number,
  height: number,
  absoluteX: number,
  absoluteY: number,
  nodeId: string,
|};

export type ResizeParamsWithDirection = {|
  ...ResizeParams,
  direction: ControlPosition,
|};

export type ResizeDragEvent = {|
  x: number,
  y: number,
  width: number,
  height: number,
|};

// Node and edge changes
export type NodeChange =
  | NodeDimensionChange
  | NodePositionChange
  | NodeSelectionChange
  | NodeRemoveChange
  | NodeAddChange
  | NodeReplaceChange;

export type NodeDimensionChange = {|
  type: 'dimensions',
  id: string,
  dimensions: Dimensions,
|};

export type NodePositionChange = {|
  type: 'position',
  id: string,
  position: XYPosition,
  positionAbsolute?: XYPosition,
  dragging?: boolean,
|};

export type NodeSelectionChange = {|
  type: 'select',
  id: string,
  selected: boolean,
|};

export type NodeRemoveChange = {|
  type: 'remove',
  id: string,
|};

export type NodeAddChange = {|
  type: 'add',
  item: Node,
|};

export type NodeReplaceChange = {|
  type: 'replace',
  item: Node,
|};

export type EdgeChange =
  | EdgeSelectionChange
  | EdgeRemoveChange
  | EdgeAddChange;

export type EdgeSelectionChange = {|
  type: 'select',
  id: string,
  selected: boolean,
|};

export type EdgeRemoveChange = {|
  type: 'remove',
  id: string,
|};

export type EdgeAddChange = {|
  type: 'add',
  item: Edge,
|};

// Utils
export type GetBezierPathParams = {|
  sourceX: number,
  sourceY: number,
  sourcePosition?: Position,
  targetX: number,
  targetY: number,
  targetPosition?: Position,
  curvature?: number,
|};

declare export function getBezierEdgeCenter({
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
  curvature,
}: GetBezierPathParams): [number, number];
