// @flow strict

// Core types
export type Align = 'start' | 'center' | 'end';
export type PanOnScrollMode = 'free' | 'vertical' | 'horizontal';
export type SelectionMode = 'partial' | 'full';
export type ColorMode = 'light' | 'dark';
export type ColorModeClass = 'light' | 'dark' | 'system';

// Path and marker types
export type SmoothStepPathOptions = {|
  offset?: number,
  borderRadius?: number,
|};

export type BezierPathOptions = {|
  curvature?: number,
|};

export type EdgeMarkerType = 'arrow' | 'arrowclosed';

export type EdgeMarker = {|
  type: EdgeMarkerType,
  color?: string,
  width?: number,
  height?: number,
  markerUnits?: string,
  orient?: string,
  strokeWidth?: number,
|};

// Event handlers and callbacks
export type OnMove = (event: MouseEvent | TouchEvent | null, viewport: Viewport) => void;
export type OnMoveStart = OnMove;
export type OnMoveEnd = OnMove;

export type OnConnectStartParams = {|
  nodeId: string | null,
  handleId: string | null,
  handleType: 'source' | 'target',
|};

export type OnConnectStart = (event: MouseEvent | TouchEvent, params: OnConnectStartParams) => void;
export type OnConnect = (connection: Connection) => void;
export type OnConnectEnd = (event: MouseEvent | TouchEvent) => void;

// Viewport and positioning
export type Viewport = {|
  x: number,
  y: number,
  zoom: number,
|};

export type SnapGrid = [number, number];

export type ViewportHelperFunctionOptions = {|
  duration?: number,
|};

export type SetCenterOptions = {|
  ...ViewportHelperFunctionOptions,
  zoom?: number,
|};

export type FitBoundsOptions = {|
  ...ViewportHelperFunctionOptions,
  padding?: number,
  includeHiddenNodes?: boolean,
  minZoom?: number,
  maxZoom?: number,
|};

// Viewport and scrolling modes
export type PanOnScrollMode = 'free' | 'vertical' | 'horizontal';

// UI and layout
export type PanelPosition = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';

export type ProOptions = {|
  account?: string,
  hideAttribution?: boolean,
|};

export type SelectionRect = {|
  x: number,
  y: number,
  width: number,
  height: number,
|};

// Error handling
export type OnError = (id: string, message: string) => void;

// Node positioning and resizing
export type NodeOrigin = [number, number];

export type OnSelectionDrag = (event: MouseEvent, nodes: Array<Node>) => void;

export type HandleType = 'source' | 'target';

export type ShouldResize = (event: MouseEvent | TouchEvent, params: ResizeParams) => boolean;
export type OnResizeStart = (event: MouseEvent | TouchEvent, params: ResizeParams) => void;
export type OnResize = (event: MouseEvent | TouchEvent, params: ResizeParamsWithDirection) => void;
export type OnResizeEnd = (event: MouseEvent | TouchEvent, params: ResizeParams) => void;

export type ControlPosition = 'top' | 'right' | 'bottom' | 'left' | 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
export type ControlLinePosition = 'top' | 'right' | 'bottom' | 'left';
export type ResizeControlVariant = 'handle' | 'line';

export type ResizeParams = {|
  x: number,
  y: number,
  width: number,
  height: number,
  absoluteX: number,
  absoluteY: number,
  nodeId: string,
|};

export type ResizeParamsWithDirection = {|
  ...ResizeParams,
  direction: ControlPosition,
|};

export type ResizeDragEvent = {|
  x: number,
  y: number,
  width: number,
  height: number,
|};

// Node and edge changes
export type NodeChange =
  | NodeDimensionChange
  | NodePositionChange
  | NodeSelectionChange
  | NodeRemoveChange
  | NodeAddChange
  | NodeReplaceChange;

export type NodeDimensionChange = {|
  type: 'dimensions',
  id: string,
  dimensions: Dimensions,
|};

export type NodePositionChange = {|
  type: 'position',
  id: string,
  position: XYPosition,
  positionAbsolute?: XYPosition,
  dragging?: boolean,
|};

export type NodeSelectionChange = {|
  type: 'select',
  id: string,
  selected: boolean,
|};

export type NodeRemoveChange = {|
  type: 'remove',
  id: string,
|};

export type NodeAddChange = {|
  type: 'add',
  item: Node,
|};

export type NodeReplaceChange = {|
  type: 'replace',
  item: Node,
|};

export type EdgeChange =
  | EdgeSelectionChange
  | EdgeRemoveChange
  | EdgeAddChange;

export type EdgeSelectionChange = {|
  type: 'select',
  id: string,
  selected: boolean,
|};

export type EdgeRemoveChange = {|
  type: 'remove',
  id: string,
|};

export type EdgeAddChange = {|
  type: 'add',
  item: Edge,
|};

// Edge options
export type DefaultEdgeOptions = {|
  type?: string,
  animated?: boolean,
  hidden?: boolean,
  deletable?: boolean,
  selected?: boolean,
  data?: Object,
  style?: Object,
  className?: string,
  interactionWidth?: number,
  focusable?: boolean,
|};

// Node types
export type NodeBase<NodeData: Object = Object, NodeType: string = string> = {|
  id: string,
  position: XYPosition,
  data: NodeData,
  type?: NodeType,
  sourcePosition?: Position,
  targetPosition?: Position,
  hidden?: boolean,
  selected?: boolean,
  dragging?: boolean,
  draggable?: boolean,
  selectable?: boolean,
  connectable?: boolean,
  deletable?: boolean,
  dragHandle?: string,
  width?: number,
  height?: number,
  initialWidth?: number,
  initialHeight?: number,
  parentId?: string,
  zIndex?: number,
  extent?: 'parent' | CoordinateExtent,
  expandParent?: boolean,
  positionAbsolute?: XYPosition,
  ariaLabel?: string,
  focusable?: boolean,
  resizing?: boolean,
|};

export type InternalNodeBase<NodeType> = {|
  ...NodeBase<any, any>,
  measured: {|
    width?: number,
    height?: number,
  |},
  internals: {|
    positionAbsolute: XYPosition,
    z: number,
    userNode: NodeType,
    handleBounds?: NodeHandleBounds,
    bounds?: NodeBounds,
  |},
|};

export type NodeHandleBounds = {|
  source: Array<Handle> | null,
  target: Array<Handle> | null,
|};

export type NodeBounds = {|
  width: number | null,
  height: number | null,
|};

export type NodeDragItem = {|
  id: string,
  position: XYPosition,
  distance: XYPosition,
  measured: {|
    width: number,
    height: number,
  |},
  internals: {|
    positionAbsolute: XYPosition,
  |},
  extent?: 'parent' | CoordinateExtent,
  parentId?: string,
  dragging?: boolean,
  origin?: NodeOrigin,
  expandParent?: boolean,
|};

// Connection types
export type Connection = {|
  source: string,
  target: string,
  sourceHandle: string | null,
  targetHandle: string | null,
|};

export type HandleConnection = {|
  ...Connection,
  edgeId: string,
|};

export type ConnectionMode = 'strict' | 'loose';

// Store state
export type ReactFlowState = {|
  nodes: Array<Node>,
  edges: Array<Edge>,
  viewport: Viewport,
  nodeInternals: Map<string, Node>,
  edgeInternals: Map<string, Edge>,
  selectedNodes: Set<string>,
  selectedEdges: Set<string>,
  minZoom: number,
  maxZoom: number,
  translateExtent: CoordinateExtent,
  nodeExtent: CoordinateExtent,
  nodesSelectable: boolean,
  nodesConnectable: boolean,
  nodesDraggable: boolean,
  elementsSelectable: boolean,
  multiSelectionActive: boolean,
  width: number,
  height: number,
  connectionMode: ConnectionMode,
  snapGrid: [number, number],
  snapToGrid: boolean,
  nodeOrigin: NodeOrigin,
|};

// Viewport types
export type ZoomInOut = (options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type ZoomTo = (zoomLevel: number, options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type GetZoom = () => number;
export type GetViewport = () => Viewport;
export type SetViewport = (viewport: Viewport, options?: ViewportHelperFunctionOptions) => Promise<boolean>;
export type SetCenter = (x: number, y: number, options?: SetCenterOptions) => Promise<boolean>;
export type FitBounds = (bounds: Rect, options?: FitBoundsOptions) => Promise<boolean>;

// Constants
export const elementSelectionKeys: Array<string> = ['Enter', ' ', 'Escape'];

export const infiniteExtent: CoordinateExtent = [
  [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],
  [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],
];

// Additional utility types
export type CoordinateExtent = [[number, number], [number, number]];
export type Position = 'top' | 'right' | 'bottom' | 'left';
export type XYPosition = {|
  x: number,
  y: number,
|};

export type Dimensions = {|
  width: number,
  height: number,
|};

export type Rect = {|
  ...XYPosition,
  ...Dimensions,
|};

// Utils
export type GetBezierPathParams = {|
  sourceX: number,
  sourceY: number,
  sourcePosition?: Position,
  targetX: number,
  targetY: number,
  targetPosition?: Position,
  curvature?: number,
|};

declare export function getBezierEdgeCenter({
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
  curvature,
}: GetBezierPathParams): [number, number];
