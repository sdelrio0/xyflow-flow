// @flow strict

import type { ComponentType, ElementRef, Node as ReactNode } from 'react';
import type {
  NodeBase,
  XYPosition,
  Position,
  Connection,
  ConnectionMode,
  HandleType,
  OnMove,
  OnMoveStart,
  OnMoveEnd,
  Viewport,
  PanelPosition,
  SelectionRect,
  OnError,
  CoordinateExtent,
  ColorMode,
  ColorModeClass,
  Dimensions,
  NodeDragItem,
} from './system';

// React Flow Component Props
export type ReactFlowProps = {|
  nodes?: Array<Node>,
  edges?: Array<Edge>,
  defaultNodes?: Array<Node>,
  defaultEdges?: Array<Edge>,
  className?: string,
  nodeTypes?: { [key: string]: ComponentType<any> },
  edgeTypes?: { [key: string]: ComponentType<any> },
  onNodeClick?: (event: MouseEvent, node: Node) => void,
  onEdgeClick?: (event: MouseEvent, edge: Edge) => void,
  onInit?: (reactFlowInstance: ReactFlowInstance) => void,
  onMove?: OnMove,
  onMoveStart?: OnMoveStart,
  onMoveEnd?: OnMoveEnd,
  onConnect?: (connection: Connection) => void,
  onConnectStart?: (event: MouseEvent | TouchEvent, params: OnConnectStartParams) => void,
  onConnectEnd?: (event: MouseEvent | TouchEvent) => void,
  onClickConnectStart?: (event: MouseEvent, params: OnConnectStartParams) => void,
  onClickConnectEnd?: (event: MouseEvent) => void,
  onNodeMouseEnter?: (event: MouseEvent, node: Node) => void,
  onNodeMouseMove?: (event: MouseEvent, node: Node) => void,
  onNodeMouseLeave?: (event: MouseEvent, node: Node) => void,
  onNodeContextMenu?: (event: MouseEvent, node: Node) => void,
  onNodeDragStart?: (event: MouseEvent, node: Node, nodes: Array<Node>) => void,
  onNodeDrag?: (event: MouseEvent, node: Node, nodes: Array<Node>) => void,
  onNodeDragStop?: (event: MouseEvent, node: Node, nodes: Array<Node>) => void,
  onNodesDelete?: (nodes: Array<Node>) => void,
  onEdgesDelete?: (edges: Array<Edge>) => void,
  onSelectionChange?: (params: {| nodes: Array<Node>, edges: Array<Edge> |}) => void,
  onSelectionDragStart?: (event: MouseEvent, nodes: Array<Node>) => void,
  onSelectionDrag?: (event: MouseEvent, nodes: Array<Node>) => void,
  onSelectionDragStop?: (event: MouseEvent, nodes: Array<Node>) => void,
  onSelectionContextMenu?: (event: MouseEvent, nodes: Array<Node>) => void,
  connectionMode?: ConnectionMode,
  connectionLineType?: ConnectionLineType,
  connectionLineStyle?: Object,
  connectionLineComponent?: ComponentType<any>,
  deleteKeyCode?: string | null,
  selectionKeyCode?: string | null,
  multiSelectionKeyCode?: string | null,
  zoomActivationKeyCode?: string | null,
  snapToGrid?: boolean,
  snapGrid?: [number, number],
  onlyRenderVisibleElements?: boolean,
  nodesDraggable?: boolean,
  nodesConnectable?: boolean,
  elementsSelectable?: boolean,
  selectNodesOnDrag?: boolean,
  panOnDrag?: boolean | Array<number>,
  minZoom?: number,
  maxZoom?: number,
  defaultViewport?: Viewport,
  translateExtent?: CoordinateExtent,
  preventScrolling?: boolean,
  nodeExtent?: CoordinateExtent,
  defaultMarkerColor?: string,
  zoomOnScroll?: boolean,
  zoomOnPinch?: boolean,
  panOnScroll?: boolean,
  panOnScrollSpeed?: number,
  panOnScrollMode?: PanOnScrollMode,
  zoomOnDoubleClick?: boolean,
  projectEdges?: boolean,
  attributionPosition?: PanelPosition,
  proOptions?: ProOptions,
  defaultEdgeOptions?: DefaultEdgeOptions,
  children?: ReactNode,
|};

// Handle Props
export type HandleProps = {|
  id?: string,
  type: 'source' | 'target',
  position: Position,
  isConnectable?: boolean,
  isConnectableStart?: boolean,
  isConnectableEnd?: boolean,
  onConnect?: (params: Connection) => void,
  isValidConnection?: (connection: Connection) => boolean,
  children?: ReactNode,
  className?: string,
  style?: Object,
  data?: any,
|};

// Panel Props
export type PanelProps = {|
  position?: PanelPosition,
  style?: Object,
  className?: string,
  children?: ReactNode,
|};

// Node Types
export type Node<T = any> = {|
  ...NodeBase<T>,
  dragHandle?: string,
  style?: Object,
  className?: string,
|};

// Edge Types
export type Edge<T = any> = {|
  id: string,
  type?: string,
  source: string,
  target: string,
  sourceHandle?: ?string,
  targetHandle?: ?string,
  label?: string | Node<T>,
  labelStyle?: Object,
  labelShowBg?: boolean,
  labelBgStyle?: Object,
  labelBgPadding?: [number, number],
  labelBgBorderRadius?: number,
  style?: Object,
  animated?: boolean,
  hidden?: boolean,
  deletable?: boolean,
  data?: T,
  className?: string,
  sourceNode?: Node<T>,
  targetNode?: Node<T>,
  selected?: boolean,
  markerEnd?: string,
  markerStart?: string,
  zIndex?: number,
  ariaLabel?: string,
  interactionWidth?: number,
  focusable?: boolean,
|};

// Hook Types
export type ReactFlowInstance = {|
  getNodes: () => Array<Node>,
  getEdges: () => Array<Edge>,
  getNode: (id: string) => ?Node,
  getEdge: (id: string) => ?Edge,
  setNodes: (nodes: Array<Node> | ((nodes: Array<Node>) => Array<Node>)) => void,
  setEdges: (edges: Array<Edge> | ((edges: Array<Edge>) => Array<Edge>)) => void,
  addNodes: (nodes: Array<Node> | Node) => void,
  addEdges: (edges: Array<Edge> | Edge) => void,
  toObject: () => Object,
  getViewport: () => Viewport,
  setViewport: (viewport: Viewport) => void,
  fitView: (options?: Object) => void,
  zoomIn: () => void,
  zoomOut: () => void,
  zoomTo: (zoomLevel: number) => void,
  getElements: () => Array<Node | Edge>,
  project: (position: XYPosition) => XYPosition,
  deleteElements: (params: {| nodes?: Array<Node>, edges?: Array<Edge> |}) => void,
|};

// Connection Line Types
export type ConnectionLineType = 'default' | 'straight' | 'step' | 'smoothstep' | 'bezier';

// Utility Functions
declare export function applyNodeChanges(changes: Array<NodeChange>, nodes: Array<Node>): Array<Node>;
declare export function applyEdgeChanges(changes: Array<EdgeChange>, edges: Array<Edge>): Array<Edge>;
declare export function isNode(element: any): boolean %checks(return true);
declare export function isEdge(element: any): boolean %checks(return true);

// Hook Declarations
declare export function useNodes<T = any>(): Array<Node<T>>;
declare export function useEdges<T = any>(): Array<Edge<T>>;
declare export function useViewport(): Viewport;
declare export function useReactFlow(): ReactFlowInstance;
declare export function useStore<T>(selector: (state: ReactFlowState) => T): T;
declare export function useStoreApi(): ReactFlowState;
declare export function useNodesState<T = any>(
  initialNodes: Array<Node<T>>
): [Array<Node<T>>, (nodes: Array<Node<T>> | ((nodes: Array<Node<T>>) => Array<Node<T>>)) => void];
declare export function useEdgesState<T = any>(
  initialEdges: Array<Edge<T>>
): [Array<Edge<T>>, (edges: Array<Edge<T>> | ((edges: Array<Edge<T>>) => Array<Edge<T>>)) => void];

// Component Declarations
declare export var ReactFlow: ComponentType<ReactFlowProps>;
declare export var Handle: ComponentType<HandleProps>;
declare export var EdgeText: ComponentType<any>;
declare export var Panel: ComponentType<PanelProps>;
declare export var ReactFlowProvider: ComponentType<any>;
declare export var EdgeLabelRenderer: ComponentType<any>;
declare export var ViewportPortal: ComponentType<any>;
